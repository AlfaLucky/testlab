import requests
import pytest

# API URL –∏ –∫–ª—é—á
BASE_URL = "https://api.thedogapi.com/v1"
API_KEY = "your_api_key_here"
HEADERS = {"x-api-key": API_KEY}


def test_get_breeds():
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ—Ä–æ–¥ —Å–æ–±–∞–∫ """
    response = requests.get(f"{BASE_URL}/breeds", headers=HEADERS)

    assert response.status_code == 200, "–û—à–∏–±–∫–∞: –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ 200"

    data = response.json()
    assert isinstance(data, list), "–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º"
    assert len(data) > 0, "–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–¥ –ø—É—Å—Ç"
    assert "name" in data[0], "–£ –ø–æ—Ä–æ–¥—ã –Ω–µ—Ç –∏–º–µ–Ω–∏"


def test_search_breed():
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ä–æ–¥—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é """
    breed_name = "Labrador"
    response = requests.get(f"{BASE_URL}/breeds/search?q={breed_name}", headers=HEADERS)

    assert response.status_code == 200, "–û—à–∏–±–∫–∞: –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ 200"

    data = response.json()
    assert isinstance(data, list), "–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º"
    assert len(data) > 0, "–ü–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    assert breed_name.lower() in data[0]["name"].lower(), "–ò–º—è –ø–æ—Ä–æ–¥—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"


def test_get_random_image():
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±–∞–∫–∏ """
    response = requests.get(f"{BASE_URL}/images/search", headers=HEADERS)

    assert response.status_code == 200, "–û—à–∏–±–∫–∞: –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ 200"

    data = response.json()
    assert isinstance(data, list) and len(data) > 0, "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
    assert "url" in data[0], "–í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"


def test_upload_image():
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–±–∞–∫–∏ """
    image_path = "dog.jpg"  # –ó–∞—Ä–∞–Ω–µ–µ –ø–æ–ª–æ–∂–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —ç—Ç—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    with open(image_path, "rb") as img:
        files = {"file": img}
        response = requests.post(f"{BASE_URL}/images/upload", headers=HEADERS, files=files)

    assert response.status_code == 201, "–û—à–∏–±–∫–∞: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å"

    data = response.json()
    assert "id" in data, "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ID –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"


# üîπ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã üîπ

def test_invalid_api_key():
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á) """
    headers = {"x-api-key": "invalid_key"}
    response = requests.get(f"{BASE_URL}/breeds", headers=headers)

    assert response.status_code == 403, "–û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ 403 (–∑–∞–ø—Ä–µ—â–µ–Ω–æ)"
    assert "message" in response.json(), "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"


def test_search_nonexistent_breed():
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ—Ä–æ–¥—ã """
    breed_name = "NonexistentDogBreed"
    response = requests.get(f"{BASE_URL}/breeds/search?q={breed_name}", headers=HEADERS)

    assert response.status_code == 200, "–û—à–∏–±–∫–∞: –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –Ω–µ 200"
    data = response.json()
    assert isinstance(data, list), "–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º"
    assert len(data) == 0, "–ù–∞–π–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ, —Ö–æ—Ç—è –ø–æ—Ä–æ–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"


def test_get_image_with_invalid_param():
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º """
    response = requests.get(f"{BASE_URL}/images/search?limit=invalid", headers=HEADERS)

    assert response.status_code == 400, "–û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ 400 (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å)"
    assert "message" in response.json(), "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"


def test_upload_invalid_file():
    """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞) """
    invalid_file_path = "test.txt"
    with open(invalid_file_path, "w") as file:
        file.write("This is not an image.")

    with open(invalid_file_path, "rb") as file:
        files = {"file": file}
        response = requests.post(f"{BASE_URL}/images/upload", headers=HEADERS, files=files)

    assert response.status_code == 400, "–û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ 400 (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞)"
    assert "message" in response.json(), "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"
